{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","shared/validation.js","components/UI/Form/FormField/FormField.js","components/UI/Form/FormField/FormField.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","onChangeHandler","event","inputIdentifier","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","building","onSetAuthRedirectPath","formFieldsArray","key","push","id","config","form","map","formField","shouldValidate","invalid","change","loading","errorMessage","error","message","redirect","isAuth","to","redirectPath","className","classes","onSubmit","btnType","click","Component","connect","auth","token","burgerBuilder","dispatch","actions","path","rules","isValid","trim","length","maxLength","test","isNumeric","ValidationError","inputClasses","FieldElement","Invalid","inputElement","join","onChange","options","option","displayValue","Field","FieldLabel","label"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,KAAO,qB,oLCiBnBC,E,4MACLC,MAAQ,CACPC,SAAU,CACTC,MAAO,CACNC,YAAa,QACbC,cAAe,CACdC,KAAM,OACNC,YAAa,iBAEdC,MAAO,GACPC,WAAY,CACXC,UAAU,EACVC,SAAS,GAEVC,OAAO,EACPC,SAAS,GAEVC,SAAU,CACTV,YAAa,QACbC,cAAe,CACdC,KAAM,WACNC,YAAa,YAEdC,MAAO,GACPC,WAAY,CACXC,UAAU,EACVK,UAAW,GAEZH,OAAO,EACPC,SAAS,IAGLG,UAAU,G,EASdC,gBAAkB,SAACC,EAAOC,GACtB,IAAMC,EAAe,2BACd,EAAKnB,MAAMC,UADG,kBAEhBiB,EAFgB,2BAGV,EAAKlB,MAAMC,SAASiB,IAHV,IAIbX,MAAOU,EAAMG,OAAOb,MACpBI,MAAOU,YAAcJ,EAAMG,OAAOb,MAAO,EAAKP,MAAMC,SAASiB,GAAiBV,YAC9EI,SAAS,MAGjB,EAAKU,SAAS,CAAErB,SAAUkB,K,EAG9BI,cAAgB,SAAAN,GACZA,EAAMO,iBACN,EAAKC,MAAMC,OAAO,EAAK1B,MAAMC,SAASC,MAAMK,MAAO,EAAKP,MAAMC,SAASY,SAASN,MAAO,EAAKP,MAAMe,W,EAGtGY,sBAAwB,WACpB,EAAKL,UAAS,SAAAM,GACV,MAAO,CAAEb,UAAWa,EAAUb,c,kEAzB7Bc,KAAKJ,MAAMK,UACZD,KAAKJ,MAAMM,sBAAsB,O,+BA4BlC,IAAD,OACIC,EAAkB,GAC9B,IAAK,IAAMC,KAAOJ,KAAK7B,MAAMC,SAC5B+B,EAAgBE,KAAK,CACpBC,GAAIF,EACJG,OAAQP,KAAK7B,MAAMC,SAASgC,KAGxB,IAAII,EAAOL,EAAgBM,KAAI,SAAAC,GAAS,OAC7C,kBAAC,IAAD,CACCN,IAAKM,EAAUJ,GACfhC,YAAaoC,EAAUH,OAAOjC,YAC9BC,cAAemC,EAAUH,OAAOhC,cAChCG,MAAOgC,EAAUH,OAAO7B,MACxBiC,eAAgBD,EAAUH,OAAO5B,WACjCI,QAAS2B,EAAUH,OAAOxB,QAC1B6B,SAAUF,EAAUH,OAAOzB,MAC3B+B,OAAQ,SAAAzB,GAAK,OAAI,EAAKD,gBAAgBC,EAAOsB,EAAUJ,UAE/CN,KAAKJ,MAAMkB,UAASN,EAAO,kBAAC,IAAD,OAE/B,IAAIO,EAAe,KACff,KAAKJ,MAAMoB,QAAOD,EAAe,2BAAIf,KAAKJ,MAAMoB,MAAMC,UAE1D,IAAIC,EAAW,KAKrB,OAJUlB,KAAKJ,MAAMuB,SACXD,EAAW,kBAAC,IAAD,CAAUE,GAAIpB,KAAKJ,MAAMyB,gBAI7C,yBAAKC,UAAWC,IAAQrD,MACVgD,EACAH,EACb,0BAAMS,SAAUxB,KAAKN,eACnBc,EACD,kBAAC,IAAD,CAAQiB,QAAQ,WAAhB,WAEW,kBAAC,IAAD,CACIC,MAAO1B,KAAKF,sBACZ2B,QAAQ,UAFZ,aAGezB,KAAK7B,MAAMe,SAAW,UAAY,gB,GAzG9CyC,aAiIJC,uBAjBS,SAAAzD,GACpB,MAAO,CACH2C,QAAS3C,EAAM0D,KAAKf,QACpBE,MAAO7C,EAAM0D,KAAKb,MAClBG,OAA6B,OAArBhD,EAAM0D,KAAKC,MACnBT,aAAclD,EAAM0D,KAAKR,aACzBpB,SAAU9B,EAAM4D,cAAc9B,aAIX,SAAA+B,GACvB,MAAO,CACHnC,OAAQ,SAACxB,EAAOW,EAAUE,GAAlB,OAA+B8C,EAASC,IAAa5D,EAAOW,EAAUE,KAC9EgB,sBAAuB,SAAAgC,GAAI,OAAIF,EAASC,IAA4BC,QAI7DN,CAA6C1D,I,gCC5H7CsB,IAvBO,SAACd,EAAOyD,GAC1B,IAAIC,GAAU,EACd,IAAKD,EAAO,OAAO,EAUnB,GATIA,EAAMvD,WACNwD,EAA2B,KAAjB1D,EAAM2D,QAAiBD,GAEjCD,EAAMlD,YACNmD,EAAU1D,EAAM4D,QAAUH,EAAMlD,WAAamD,GAE7CD,EAAMI,YACNH,EAAU1D,EAAM4D,QAAUH,EAAMI,WAAaH,GAE7CD,EAAMtD,QAAS,CAEfuD,EADgB,wIACEI,KAAK9D,IAAU0D,EAErC,GAAID,EAAMM,UAAW,CAEjBL,EADgB,QACEI,KAAK9D,IAAU0D,EAErC,OAAOA,I,gCCpBX,qCA+Ce1B,IA1CG,SAAAd,GACd,IAAImB,EAAe,KACfnB,EAAMgB,SAAWhB,EAAMb,UACvBgC,EAAe,uBAAGO,UAAWC,IAAQmB,iBAAtB,gCAEtB,IAAMC,EAAe,CAACpB,IAAQqB,cACvBhD,EAAMgB,SAAWhB,EAAMe,gBAAkBf,EAAMb,SAC/C4D,EAAatC,KAAKkB,IAAQsB,SAG9B,IAAIC,EAAe,KACnB,OAAQlD,EAAMtB,aACV,IAAK,QACDwE,EAAe,yCAAOxB,UAAWqB,EAAaI,KAAK,MAAUnD,EAAMrB,cAApD,CAAmEG,MAAOkB,EAAMlB,MAAOsE,SAAUpD,EAAMiB,UACtH,MACJ,IAAK,WACDiC,EAAe,4CAAUxB,UAAWqB,EAAaI,KAAK,MAAUnD,EAAMrB,cAAvD,CAAsEG,MAAOkB,EAAMlB,MAAOsE,SAAUpD,EAAMiB,UACzH,MACJ,IAAK,SACDiC,EACR,4BAAQxB,UAAWqB,EAAaI,KAAK,KAAMrE,MAAOkB,EAAMlB,MAAOsE,SAAUpD,EAAMiB,QAC7EjB,EAAMrB,cAAc0E,QAAQxC,KAAI,SAAAyC,GAAM,OACtC,4BAAQ9C,IAAK8C,EAAOxE,MAAOA,MAAOwE,EAAOxE,OACvCwE,EAAOC,kBAKH,MACJ,QACIL,EAAe,yCAAOxB,UAAWqB,EAAaI,KAAK,MAAUnD,EAAMrB,cAApD,CAAmEG,MAAOkB,EAAMlB,MAAOsE,SAAUpD,EAAMiB,UAG9H,OACI,yBAAKS,UAAWC,IAAQ6B,OACpB,2BAAO9B,UAAWC,IAAQ8B,YAAazD,EAAM0D,OAC5CR,EACA/B,K,mBCzCb/C,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,WAAa,8BAA8B,aAAe,gCAAgC,QAAU,2BAA2B,gBAAkB","file":"static/js/4.44a16783.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\n// Redux\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\n// Shared\nimport checkValidity from '../../shared/validation';\n\n// Components\nimport FormField from '../../components/UI/Form/FormField/FormField';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\n// Styles\nimport classes from './Auth.module.css';\n\nclass Auth extends Component {\n\tstate = {\n\t\tcontrols: {\n\t\t\temail: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'mail',\n\t\t\t\t\tplaceholder: 'Email address',\n\t\t\t\t},\n\t\t\t\tvalue: '',\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tisEmail: true,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t\tpassword: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'password',\n\t\t\t\t\tplaceholder: 'Password',\n\t\t\t\t},\n\t\t\t\tvalue: '',\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tminLength: 6,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n        },\n        isSignup: true\n    };\n\n    componentDidMount() {\n        if (!this.props.building) {\n            this.props.onSetAuthRedirectPath('/');\n        }\n    }\n\n    onChangeHandler = (event, inputIdentifier) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [inputIdentifier]: {\n                ...this.state.controls[inputIdentifier],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[inputIdentifier].validation),\n                touched: true\n            }\n        };\n        this.setState({ controls: updatedControls });\n    };\n\n    submitHandler = event => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup }\n        });\n    };\n\n\trender() {\n        const formFieldsArray = [];\n\t\tfor (const key in this.state.controls) {\n\t\t\tformFieldsArray.push({\n\t\t\t\tid: key,\n\t\t\t\tconfig: this.state.controls[key],\n\t\t\t});\n        }\n        let form = formFieldsArray.map(formField => (\n\t\t\t<FormField\n\t\t\t\tkey={formField.id}\n\t\t\t\telementType={formField.config.elementType}\n\t\t\t\telementConfig={formField.config.elementConfig}\n\t\t\t\tvalue={formField.config.value}\n\t\t\t\tshouldValidate={formField.config.validation}\n\t\t\t\ttouched={formField.config.touched}\n\t\t\t\tinvalid={!formField.config.valid}\n\t\t\t\tchange={event => this.onChangeHandler(event, formField.id)} />\n        ));\n        if (this.props.loading) form = <Spinner />;\n\n        let errorMessage = null;\n        if (this.props.error) errorMessage = <p>{this.props.error.message}</p>;\n\n        let redirect = null;\n        if (this.props.isAuth) {\n            redirect = <Redirect to={this.props.redirectPath} />\n        }\n\n\t\treturn (\n\t\t\t<div className={classes.Auth}>\n                {redirect}\n                {errorMessage}\n\t\t\t\t<form onSubmit={this.submitHandler}>\n\t\t\t\t\t{form}\n\t\t\t\t\t<Button btnType=\"Success\">SUBMIT</Button>\n\t\t\t\t</form>\n                <Button\n                    click={this.switchAuthModeHandler}\n                    btnType=\"Danger\">\n                    SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'}\n                </Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuth: state.auth.token !== null,\n        redirectPath: state.auth.redirectPath,\n        building: state.burgerBuilder.building\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: path => dispatch(actions.authSetRedirectPath(path))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","const checkValidity = (value, rules) => {\n    let isValid = true;\n    if (!rules) return true;\n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n    }\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n    }\n    if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid;\n    }\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid;\n    }\n    return isValid;\n}\n\nexport default checkValidity;\n","import React from 'react';\n\n// Styles\nimport classes from './FormField.module.css';\n\nconst formField = props => {\n    let errorMessage = null;\n    if (props.invalid && props.touched) {\n        errorMessage = <p className={classes.ValidationError}>Please enter a valid value!</p>;\n    }\n\tconst inputClasses = [classes.FieldElement];\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    let inputElement = null;\n    switch (props.elementType) {\n        case 'input':\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.change} />;\n            break;\n        case 'textarea':\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.change} />;\n            break;\n        case 'select':\n            inputElement = (\n\t\t\t\t<select className={inputClasses.join(' ')} value={props.value} onChange={props.change}>\n\t\t\t\t\t{props.elementConfig.options.map(option => (\n\t\t\t\t\t\t<option key={option.value} value={option.value}>\n\t\t\t\t\t\t\t{option.displayValue}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</select>\n\t\t\t);\n            break;\n        default:\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.change} />;\n    }\n\n    return (\n        <div className={classes.Field}>\n            <label className={classes.FieldLabel}>{props.label}</label>\n            {inputElement}\n            {errorMessage}\n        </div>\n    );\n};\n\nexport default formField;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Field\":\"FormField_Field__1fuAQ\",\"FieldLabel\":\"FormField_FieldLabel__3DEoX\",\"FieldElement\":\"FormField_FieldElement__oCPxP\",\"Invalid\":\"FormField_Invalid__2zghF\",\"ValidationError\":\"FormField_ValidationError__lHPtX\"};"],"sourceRoot":""}