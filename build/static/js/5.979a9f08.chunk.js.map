{"version":3,"sources":["components/Burger/Order/SingleOrder/SingleOrder.module.css","components/Burger/Order/SingleOrder/SingleOrder.js","containers/Orders/Orders.js"],"names":["module","exports","singleOrder","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ing","className","classes","Ingredient","key","SingleOrder","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","order","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,WAAa,kC,sICuB/DC,EAnBK,SAAAC,GAChB,IAAMC,EAAc,GACpB,IAAK,IAAMC,KAAkBF,EAAMC,YAC/BA,EAAYE,KAAK,CACbC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAIlC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GAAG,OAAI,0BAAMC,UAAWC,IAAQC,WAAYC,IAAKJ,EAAIJ,MAAOI,EAAIJ,KAAzD,KAAiEI,EAAIH,OAArE,QAEhD,OACI,yBAAKI,UAAWC,IAAQG,aACpB,2CAAiBP,GACjB,2CAAgB,kCAAQN,EAAMc,MAAMC,QAAQ,O,gBCPlDC,E,kLAEEC,KAAKjB,MAAMkB,cAAcD,KAAKjB,MAAMmB,MAAOF,KAAKjB,MAAMoB,U,+BAItD,IAAIC,EAAS,kBAACC,EAAA,EAAD,MAOb,OANKL,KAAKjB,MAAMuB,UACZF,EAASJ,KAAKjB,MAAMqB,OAAOd,KAAI,SAAAiB,GAC3B,OAAO,kBAACX,EAAD,CAAaD,IAAKY,EAAMC,GAAIxB,YAAauB,EAAMvB,YAAaa,OAAQU,EAAMV,YAIlFO,M,GAbMK,aAgCNC,uBAfS,SAAAC,GACpB,MAAO,CACHP,OAAQO,EAAMJ,MAAMH,OACpBE,QAASK,EAAMJ,MAAMD,QACrBJ,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,WAIA,SAAAU,GACvB,MAAO,CACHZ,cAAe,SAACC,EAAOC,GAAR,OAAmBU,EAASC,IAAoBZ,EAAOC,QAI/DO,CAA6CK,YAAiBhB,EAAQiB","file":"static/js/5.979a9f08.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SingleOrder\":\"SingleOrder_SingleOrder__1LceO\",\"Ingredient\":\"SingleOrder_Ingredient__-WaCK\"};","import React from 'react';\n\n// Styles\nimport classes from './SingleOrder.module.css';\n\nconst singleOrder = props => {\n    const ingredients = [];\n    for (const ingredientName in props.ingredients) {\n        ingredients.push({\n            name: ingredientName,\n            amount: props.ingredients[ingredientName]\n        })\n    }\n\n    const ingredientOutput = ingredients.map(ing => <span className={classes.Ingredient} key={ing.name}>{ing.name} ({ing.amount})</span>);\n\n    return (\n        <div className={classes.SingleOrder}>\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Total price: <b>USD {props.price.toFixed(2)}</b></p>\n        </div>\n    );\n};\n\nexport default singleOrder;","import React, { Component } from 'react';\nimport axios from '../../axios-orders';\n\n// Redux\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\n// Components\nimport SingleOrder from '../../components/Burger/Order/SingleOrder/SingleOrder';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\nclass Orders extends Component {\n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token, this.props.userId);\n    }\n\n    render() {\n        let orders = <Spinner />\n        if (!this.props.loading) {\n            orders = this.props.orders.map(order => {\n                return <SingleOrder key={order.id} ingredients={order.ingredients} price={+order.price} />;\n            });\n        }\n\n        return orders;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}