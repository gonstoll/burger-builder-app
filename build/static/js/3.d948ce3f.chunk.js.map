{"version":3,"sources":["containers/Checkout/ContactData/ContactData.module.css","components/Burger/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.js","components/Burger/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js","shared/validation.js","components/UI/Form/FormField/FormField.js","components/UI/Form/FormField/FormField.module.css"],"names":["module","exports","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","email","deliveryMethod","options","displayValue","isFormValid","orderHandler","event","a","formElId","preventDefault","orderData","order","userId","props","ingredients","price","totalPrice","onOrderCreated","token","onChangeHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","formFieldsArray","key","this","push","id","config","form","Spinner","loading","onSubmit","map","formField","FormField","shouldValidate","invalid","change","Button","btnType","disabled","className","classes","Component","connect","burgerBuilder","auth","dispatch","purchaseBurger","withErrorHandler","axios","checkoutSummary","CheckoutSummary","BurgerHolder","Burger","click","checkoutCancelled","checkoutContinued","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","match","path","to","purchased","component","rules","isValid","trim","length","isEmail","test","isNumeric","errorMessage","ValidationError","inputClasses","FieldElement","Invalid","inputElement","join","onChange","option","Field","FieldLabel","label"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,YAAc,mC,oBCAhCD,EAAOC,QAAU,CAAC,gBAAkB,yCAAyC,aAAe,wC,qNCkBtFC,E,4MACLC,MAAQ,CACPC,UAAW,CACVC,KAAM,CACLC,YAAa,QACbC,cAAe,CACdC,KAAM,OACNC,YAAa,aAEFC,MAAO,GACPC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPC,SAAS,GAEtBC,OAAQ,CACPT,YAAa,QACbC,cAAe,CACdC,KAAM,OACNC,YAAa,eAEFC,MAAO,GACPC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPC,SAAS,GAEtBE,QAAS,CACRV,YAAa,QACbC,cAAe,CACdC,KAAM,OACNC,YAAa,iBAEFC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVK,UAAW,EACXC,UAAW,GAEfL,OAAO,EACPC,SAAS,GAEtBK,MAAO,CACNb,YAAa,QACbC,cAAe,CACdC,KAAM,OACNC,YAAa,eAEFC,MAAO,GACPC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPC,SAAS,GAEtBM,eAAgB,CACfd,YAAa,SACbC,cAAe,CACdc,QAAS,CACR,CAAEX,MAAO,UAAWY,aAAc,WAClC,CAAEZ,MAAO,WAAYY,aAAc,cAGzBZ,MAAO,UACPC,WAAY,GACZE,OAAO,IAGfU,aAAa,G,EAGpBC,a,uCAAe,WAAMC,GAAN,mBAAAC,EAAA,sDAGR,IAAWC,KAFjBF,EAAMG,iBACMC,EAAY,GACK,EAAK1B,MAAMC,UAC9ByB,EAAUF,GAAY,EAAKxB,MAAMC,UAAUuB,GAAUjB,MAEzDoB,EAAQ,CACJC,OAAQ,EAAKC,MAAMD,OAC5BE,YAAa,EAAKD,MAAMC,YACfC,MAAO,EAAKF,MAAMG,WAClBN,aAEV,EAAKG,MAAMI,eAAeN,EAAO,EAAKE,MAAMK,OAZ9B,2C,wDAeZC,gBAAkB,SAACb,EAAOc,GACtB,IAAMC,EAAgB,eAAQ,EAAKrC,MAAMC,WACnCqC,EAAkB,eAAQD,EAAiBD,IACjDE,EAAmB/B,MAAQe,EAAMiB,OAAOhC,MACxC+B,EAAmB5B,MAAQ8B,YAAcF,EAAmB/B,MAAO+B,EAAmB9B,YACtF8B,EAAmB3B,SAAU,EAC7B0B,EAAiBD,GAAmBE,EACpC,IAAIlB,GAAc,EAClB,IAAK,IAAMgB,KAAmBC,EAC1BjB,EAAciB,EAAiBD,GAAiB1B,OAASU,EAE7D,EAAKqB,SAAS,CACVxC,UAAWoC,EACXjB,iB,uDAID,IAAD,OACIsB,EAAkB,GACxB,IAAK,IAAMC,KAAOC,KAAK5C,MAAMC,UACzByC,EAAgBG,KAAK,CACjBC,GAAIH,EACJI,OAAQH,KAAK5C,MAAMC,UAAU0C,KAI3C,IAAIK,EAAO,kBAACC,EAAA,EAAD,MAoBX,OAnBKL,KAAKf,MAAMqB,UACfF,EACC,0BAAMG,SAAUP,KAAKvB,cACJqB,EAAgBU,KAAI,SAAAC,GAAS,OAC1B,kBAACC,EAAA,EAAD,CACIX,IAAKU,EAAUP,GACf3C,YAAakD,EAAUN,OAAO5C,YAC9BC,cAAeiD,EAAUN,OAAO3C,cAChCG,MAAO8C,EAAUN,OAAOxC,MACxBgD,eAAgBF,EAAUN,OAAOvC,WACjCG,QAAS0C,EAAUN,OAAOpC,QAC1B6C,SAAUH,EAAUN,OAAOrC,MAC3B+C,OAAQ,SAACnC,GAAD,OAAW,EAAKa,gBAAgBb,EAAO+B,EAAUP,UAEhF,kBAACY,EAAA,EAAD,CAAQC,QAAQ,UAAUC,UAAWhB,KAAK5C,MAAMoB,aAAhD,eAMF,yBAAKyC,UAAWC,IAAQ/D,aACvB,uDACCiD,O,GAzIqBe,aA+JXC,eAhBS,SAAAhE,GACpB,MAAO,CACH8B,YAAa9B,EAAMiE,cAAcnC,YACjCE,WAAYhC,EAAMiE,cAAcjC,WAChCkB,QAASlD,EAAM2B,MAAMuB,QACrBhB,MAAOlC,EAAMkE,KAAKhC,MAClBN,OAAQ5B,EAAMkE,KAAKtC,WAIA,SAAAuC,GACvB,MAAO,CACHlC,eAAgB,SAACN,EAAOO,GAAR,OAAkBiC,EAASC,YAAezC,EAAOO,QAI1D8B,CAA6CK,YAAiBtE,EAAauE,M,0BC5J3EC,EAbS,SAAA1C,GACpB,OACF,yBAAKgC,UAAWC,IAAQU,iBACvB,uDACA,yBAAKX,UAAWC,IAAQW,cACvB,kBAACC,EAAA,EAAD,CAAQ5C,YAAaD,EAAMC,cAC3B,kBAAC4B,EAAA,EAAD,CAAQC,QAAQ,SAASgB,MAAO9C,EAAM+C,mBAAtC,UACA,kBAAClB,EAAA,EAAD,CAAQC,QAAQ,UAAUgB,MAAO9C,EAAMgD,mBAAvC,eCJEC,E,4MACFC,yBAA2B,WACvB,EAAKlD,MAAMmD,QAAQC,U,EAGvBC,yBAA2B,WACvB,EAAKrD,MAAMmD,QAAQnC,KAAnB,UAA2B,EAAKhB,MAAMsD,MAAMC,KAA5C,mB,uDAIA,IAAIb,EAAkB,kBAAC,IAAD,CAAUc,GAAG,MAezC,OAdUzC,KAAKf,MAAMC,cAAgBc,KAAKf,MAAMyD,YACtCf,EACR,oCACC,kBAACC,EAAD,CACC1C,YAAac,KAAKf,MAAMC,YACxB8C,kBAAmBhC,KAAKmC,yBACxBF,kBAAmBjC,KAAKsC,2BACzB,kBAAC,IAAD,CACCE,KAAI,UAAKxC,KAAKf,MAAMsD,MAAMC,KAAtB,iBACJG,UAAWxF,MAKRwE,M,GAzBcR,aAoCRC,uBAPS,SAAAhE,GACpB,MAAO,CACH8B,YAAa9B,EAAMiE,cAAcnC,YACjCwD,UAAWtF,EAAM2B,MAAM2D,aAIhBtB,CAAyBc,I,gCCzBzBtC,IAvBO,SAACjC,EAAOiF,GAC1B,IAAIC,GAAU,EACd,IAAKD,EAAO,OAAO,EAUnB,GATIA,EAAM/E,WACNgF,EAA2B,KAAjBlF,EAAMmF,QAAiBD,GAEjCD,EAAM1E,YACN2E,EAAUlF,EAAMoF,QAAUH,EAAM1E,WAAa2E,GAE7CD,EAAMzE,YACN0E,EAAUlF,EAAMoF,QAAUH,EAAMzE,WAAa0E,GAE7CD,EAAMI,QAAS,CAEfH,EADgB,wIACEI,KAAKtF,IAAUkF,EAErC,GAAID,EAAMM,UAAW,CAEjBL,EADgB,QACEI,KAAKtF,IAAUkF,EAErC,OAAOA,I,gCCpBX,qCA+CepC,IA1CG,SAAAxB,GACd,IAAIkE,EAAe,KACflE,EAAM2B,SAAW3B,EAAMlB,UACvBoF,EAAe,uBAAGlC,UAAWC,IAAQkC,iBAAtB,gCAEtB,IAAMC,EAAe,CAACnC,IAAQoC,cACvBrE,EAAM2B,SAAW3B,EAAM0B,gBAAkB1B,EAAMlB,SAC/CsF,EAAapD,KAAKiB,IAAQqC,SAG9B,IAAIC,EAAe,KACnB,OAAQvE,EAAM1B,aACV,IAAK,QACDiG,EAAe,yCAAOvC,UAAWoC,EAAaI,KAAK,MAAUxE,EAAMzB,cAApD,CAAmEG,MAAOsB,EAAMtB,MAAO+F,SAAUzE,EAAM4B,UACtH,MACJ,IAAK,WACD2C,EAAe,4CAAUvC,UAAWoC,EAAaI,KAAK,MAAUxE,EAAMzB,cAAvD,CAAsEG,MAAOsB,EAAMtB,MAAO+F,SAAUzE,EAAM4B,UACzH,MACJ,IAAK,SACD2C,EACR,4BAAQvC,UAAWoC,EAAaI,KAAK,KAAM9F,MAAOsB,EAAMtB,MAAO+F,SAAUzE,EAAM4B,QAC7E5B,EAAMzB,cAAcc,QAAQkC,KAAI,SAAAmD,GAAM,OACtC,4BAAQ5D,IAAK4D,EAAOhG,MAAOA,MAAOgG,EAAOhG,OACvCgG,EAAOpF,kBAKH,MACJ,QACIiF,EAAe,yCAAOvC,UAAWoC,EAAaI,KAAK,MAAUxE,EAAMzB,cAApD,CAAmEG,MAAOsB,EAAMtB,MAAO+F,SAAUzE,EAAM4B,UAG9H,OACI,yBAAKI,UAAWC,IAAQ0C,OACpB,2BAAO3C,UAAWC,IAAQ2C,YAAa5E,EAAM6E,OAC5CN,EACAL,K,mBCzCblG,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,WAAa,8BAA8B,aAAe,gCAAgC,QAAU,2BAA2B,gBAAkB","file":"static/js/3.d948ce3f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2k4Mu\",\"BurgerHolder\":\"CheckoutSummary_BurgerHolder__QJcnD\"};","import React, { Component } from 'react';\nimport axios from '../../../axios-orders';\n\n// Redux\nimport { connect } from 'react-redux';\nimport { purchaseBurger } from '../../../store/actions/index';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\n// Shared\nimport checkValidity from '../../../shared/validation';\n\n// Components\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport FormField from '../../../components/UI/Form/FormField/FormField';\n\n// Styles\nimport classes from './ContactData.module.css';\n\nclass ContactData extends Component {\n\tstate = {\n\t\torderForm: {\n\t\t\tname: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tplaceholder: 'Your name',\n\t\t\t\t},\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n\t\t\t},\n\t\t\tstreet: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tplaceholder: 'Your street',\n\t\t\t\t},\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n\t\t\t},\n\t\t\tzipCode: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tplaceholder: 'Your ZIP code',\n\t\t\t\t},\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n\t\t\t},\n\t\t\temail: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'mail',\n\t\t\t\t\tplaceholder: 'Your E-mail',\n\t\t\t\t},\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n\t\t\t},\n\t\t\tdeliveryMethod: {\n\t\t\t\telementType: 'select',\n\t\t\t\telementConfig: {\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{ value: 'fastest', displayValue: 'Fastest' },\n\t\t\t\t\t\t{ value: 'cheapest', displayValue: 'Cheapest' },\n\t\t\t\t\t],\n\t\t\t\t},\n                value: 'fastest',\n                validation: {},\n                valid: true\n\t\t\t}\n        },\n        isFormValid: false\n\t};\n\n\torderHandler = async event => {\n\t\tevent.preventDefault();\n        const orderData = {};\n        for (const formElId in this.state.orderForm) {\n            orderData[formElId] = this.state.orderForm[formElId].value;\n        }\n\t\tconst order = {\n            userId: this.props.userId,\n\t\t\tingredients: this.props.ingredients,\n            price: this.props.totalPrice,\n            orderData\n\t\t};\n\t\tthis.props.onOrderCreated(order, this.props.token);\n    };\n\n    onChangeHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = { ...this.state.orderForm };\n        const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        let isFormValid = true;\n        for (const inputIdentifier in updatedOrderForm) {\n            isFormValid = updatedOrderForm[inputIdentifier].valid && isFormValid;\n        }\n        this.setState({\n            orderForm: updatedOrderForm,\n            isFormValid\n        });\n    };\n\n\trender() {\n        const formFieldsArray = [];\n        for (const key in this.state.orderForm) {\n            formFieldsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n\t\tlet form = <Spinner />;\n\t\tif (!this.props.loading) {\n\t\t\tform = (\n\t\t\t\t<form onSubmit={this.orderHandler}>\n                    {formFieldsArray.map(formField => (\n                        <FormField\n                            key={formField.id}\n                            elementType={formField.config.elementType}\n                            elementConfig={formField.config.elementConfig}\n                            value={formField.config.value}\n                            shouldValidate={formField.config.validation}\n                            touched={formField.config.touched}\n                            invalid={!formField.config.valid}\n                            change={(event) => this.onChangeHandler(event, formField.id)} />\n                    ))}\n\t\t\t\t\t<Button btnType=\"Success\" disabled={!this.state.isFormValid}>ORDER NOW</Button>\n\t\t\t\t</form>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className={classes.ContactData}>\n\t\t\t\t<h4>Enter your Contact Data</h4>\n\t\t\t\t{form}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        totalPrice: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderCreated: (order, token) => dispatch(purchaseBurger(order, token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n","import React from 'react';\n\n// Components\nimport Burger from '../../Burger';\nimport Button from '../../../UI/Button/Button';\n\n// Styles\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = props => {\n    return (\n\t\t<div className={classes.CheckoutSummary}>\n\t\t\t<h1>We hope it tastes well!</h1>\n\t\t\t<div className={classes.BurgerHolder}>\n\t\t\t\t<Burger ingredients={props.ingredients} />\n\t\t\t\t<Button btnType=\"Danger\" click={props.checkoutCancelled}>CANCEL</Button>\n\t\t\t\t<Button btnType=\"Success\" click={props.checkoutContinued}>CONTINUE</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// Containers\nimport ContactData from './ContactData/ContactData';\n\n// Components\nimport CheckoutSummary from '../../components/Burger/Order/CheckoutSummary/CheckoutSummary';\n\nclass Checkout extends Component {\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.push(`${this.props.match.path}/contact-data`);\n    }\n\n\trender() {\n        let checkoutSummary = <Redirect to=\"/\" />;\n        if (this.props.ingredients && !this.props.purchased) {\n            checkoutSummary = (\n\t\t\t\t<>\n\t\t\t\t\t<CheckoutSummary\n\t\t\t\t\t\tingredients={this.props.ingredients}\n\t\t\t\t\t\tcheckoutCancelled={this.checkoutCancelledHandler}\n\t\t\t\t\t\tcheckoutContinued={this.checkoutContinuedHandler} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath={`${this.props.match.path}/contact-data`}\n\t\t\t\t\t\tcomponent={ContactData} />\n\t\t\t\t</>\n\t\t\t);\n        }\n\n\t\treturn checkoutSummary;\n\t}\n}\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    };\n};\n\nexport default connect(mapStateToProps)(Checkout);","const checkValidity = (value, rules) => {\n    let isValid = true;\n    if (!rules) return true;\n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n    }\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n    }\n    if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid;\n    }\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid;\n    }\n    return isValid;\n}\n\nexport default checkValidity;\n","import React from 'react';\n\n// Styles\nimport classes from './FormField.module.css';\n\nconst formField = props => {\n    let errorMessage = null;\n    if (props.invalid && props.touched) {\n        errorMessage = <p className={classes.ValidationError}>Please enter a valid value!</p>;\n    }\n\tconst inputClasses = [classes.FieldElement];\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    let inputElement = null;\n    switch (props.elementType) {\n        case 'input':\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.change} />;\n            break;\n        case 'textarea':\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.change} />;\n            break;\n        case 'select':\n            inputElement = (\n\t\t\t\t<select className={inputClasses.join(' ')} value={props.value} onChange={props.change}>\n\t\t\t\t\t{props.elementConfig.options.map(option => (\n\t\t\t\t\t\t<option key={option.value} value={option.value}>\n\t\t\t\t\t\t\t{option.displayValue}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</select>\n\t\t\t);\n            break;\n        default:\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.change} />;\n    }\n\n    return (\n        <div className={classes.Field}>\n            <label className={classes.FieldLabel}>{props.label}</label>\n            {inputElement}\n            {errorMessage}\n        </div>\n    );\n};\n\nexport default formField;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Field\":\"FormField_Field__1fuAQ\",\"FieldLabel\":\"FormField_FieldLabel__3DEoX\",\"FieldElement\":\"FormField_FieldElement__oCPxP\",\"Invalid\":\"FormField_Invalid__2zghF\",\"ValidationError\":\"FormField_ValidationError__lHPtX\"};"],"sourceRoot":""}